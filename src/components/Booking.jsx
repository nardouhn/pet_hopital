import React, { useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { Calendar, PawPrint, CheckCircle2, X } from "lucide-react";
import DatePicker from "react-datepicker";

const Booking = () => {
  const [form, setForm] = useState({
    ownerName: "",
    petName: "",
    petType: "",
    service: "",
    date: null,
    timeSlot: "",
    description: "",
  });

  const [showModal, setShowModal] = useState(false);

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleSubmit = (e) => {
    e.preventDefault();

    // Ki·ªÉm tra ƒë∆°n gi·∫£n
    if (
      !form.ownerName ||
      !form.petName ||
      !form.petType ||
      !form.service ||
      !form.date
    ) {
      alert("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!");
      return;
    }

    // Hi·ªán popup x√°c nh·∫≠n
    setShowModal(true);

    // Reset form
    setForm({
      ownerName: "",
      petName: "",
      petType: "",
      service: "",
      date: null,
      timeSlot: "",
      description: "",
    });
  };

  return (
    <section id="book" className="py-20 bg-gradient-to-b from-white to-teal-50">
      <div className="max-w-5xl mx-auto px-6">
        {/* Ti√™u ƒë·ªÅ */}
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
          viewport={{ once: true }}
          className="text-center mb-10"
        >
          <h2 className="text-4xl font-bold text-gray-800 mb-2">
            ƒê·∫∑t l·ªãch ngay !
          </h2>
          <p className="text-gray-600">
            Ch√∫ng t√¥i x√°c nh·∫≠n l·ªãch h·∫πn trong v√≤ng 24 gi·ªù üïí
          </p>
        </motion.div>

        {/* Form */}
        <motion.form
          onSubmit={handleSubmit}
          initial={{ opacity: 0, y: 40 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
          viewport={{ once: true }}
          className="bg-white rounded-3xl shadow-lg p-8 md:p-10 border border-teal-100"
        >
          <div className="grid md:grid-cols-2 gap-6">
            {/* T√™n ch·ªß */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                T√™n ch·ªß*
              </label>
              <input
                type="text"
                name="ownerName"
                value={form.ownerName}
                onChange={handleChange}
                placeholder="Nguy·ªÖn Qu·ªëc"
                className="w-full border border-gray-200 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-teal-300"
                required
              />
            </div>

            {/* T√™n th√∫ c∆∞ng */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                T√™n th∆∞·ªùng g·ªçi c·ªßa th√∫ c∆∞ng *
              </label>
              <input
                type="text"
                name="petName"
                value={form.petName}
                onChange={handleChange}
                placeholder="Hi·ªáu"
                className="w-full border border-gray-200 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-teal-300"
                required
              />
            </div>

            {/* Lo·∫°i th√∫ */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Th√∫ c∆∞ng nh√† b·∫°n l√† gi·ªëng g√¨? *
              </label>
              <input
                type="text"
                name="petType"
                value={form.petType}
                onChange={handleChange}
                placeholder="Ch√≥, m√®o,..."
                className="w-full border border-gray-200 rounded-lg px-4 py-2 bg-teal-50 focus:outline-none focus:ring-2 focus:ring-teal-300"
                required
              />
            </div>

            {/* D·ªãch v·ª• */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                D·ªãch v·ª• b·∫°n mu·ªën l√†m *
              </label>
              <input
                type="text"
                name="service"
                value={form.service}
                onChange={handleChange}
                placeholder="Kh√°m s·ª©c kh·ªèe, ti√™m ph√≤ng..."
                className="w-full border border-gray-200 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-teal-300"
                required
              />
            </div>

            {/* L·ªãch */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Ng√†y thƒÉm kh√°m*
              </label>
              <div className="relative">
                <Calendar className="w-4 h-4 text-gray-400 absolute left-3 top-3.5" />
                <DatePicker
                  selected={form.date}
                  onChange={(date) => setForm({ ...form, date })}
                  dateFormat="dd/MM/yyyy"
                  placeholderText="Ch·ªçn ng√†y"
                  className="w-full border border-gray-200 rounded-lg px-10 py-2 focus:outline-none focus:ring-2 focus:ring-teal-300"
                  minDate={new Date()}
                  required
                />
              </div>
            </div>

            {/* Khung gi·ªù */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Khung th·ªùi gian thƒÉm kh√°m
              </label>
              <select
                name="timeSlot"
                value={form.timeSlot}
                onChange={handleChange}
                className="w-full border border-gray-200 rounded-lg px-4 py-2 bg-teal-50 focus:outline-none focus:ring-2 focus:ring-teal-300"
              >
                <option value="">Ch·ªçn khung gi·ªù</option>
                <option>08:00 - 10:00</option>
                <option>10:00 - 12:00</option>
                <option>13:00 - 15:00</option>
                <option>15:00 - 17:00</option>
              </select>
            </div>

            {/* M√¥ t·∫£ */}
            <div className="md:col-span-2">
              <label className="block text-sm font-medium text-gray-700 mb-1">
                M√¥ t·∫£ t√¨nh tr·∫°ng c·ªßa th√∫ c∆∞ng
              </label>
              <textarea
                name="description"
                value={form.description}
                onChange={handleChange}
                placeholder="M√¥ t·∫£ ..."
                rows={3}
                className="w-full border border-gray-200 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-teal-300"
              ></textarea>
            </div>
          </div>

          {/* N√∫t g·ª≠i */}
          <div className="text-center mt-8">
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.97 }}
              type="submit"
              className="bg-gradient-to-r from-teal-400 to-cyan-400 text-white font-semibold px-8 py-3 rounded-full shadow-md hover:shadow-lg transition-all flex items-center gap-2 mx-auto"
            >
              ƒê·∫∑t l·ªãch h·∫πn ngay
              <PawPrint className="w-5 h-5" />
            </motion.button>
          </div>
        </motion.form>

        {/* Modal x√°c nh·∫≠n */}
        <AnimatePresence>
          {showModal && (
            <motion.div
              className="fixed inset-0 flex items-center justify-center bg-black/40 backdrop-blur-sm z-50"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
            >
              <motion.div
                initial={{ scale: 0.8, opacity: 0 }}
                animate={{ scale: 1, opacity: 1 }}
                exit={{ scale: 0.8, opacity: 0 }}
                transition={{ duration: 0.3 }}
                className="bg-white rounded-3xl shadow-xl p-8 text-center max-w-md"
              >
                <CheckCircle2 className="w-12 h-12 text-teal-500 mx-auto mb-4" />
                <h3 className="text-2xl font-semibold mb-2 text-gray-800">
                  ƒê·∫∑t l·ªãch th√†nh c√¥ng üéâ
                </h3>
                <p className="text-gray-600 mb-6">
                  C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng ch√∫ng t√¥i! L·ªãch h·∫πn c·ªßa b·∫°n s·∫Ω ƒë∆∞·ª£c
                  x√°c nh·∫≠n s·ªõm nh·∫•t.
                </p>
                <button
                  onClick={() => setShowModal(false)}
                  className="bg-teal-500 text-white px-6 py-2 rounded-full font-medium hover:bg-teal-600 transition-all flex items-center gap-2 mx-auto"
                >
                  <X className="w-4 h-4" />
                  ƒê√≥ng
                </button>
              </motion.div>
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </section>
  );
};

export default Booking;
